name: CMake Build for Doxygen

on: [push, pull_request]

jobs:
  build:
    permissions:
      contents: write # to push pages branch (peaceiris/actions-gh-pages)

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC Release",
            os: ubuntu-20.04,
            build_type: "Release", cc: "gcc", cxx: "g++",
            build_gen: "Unix Makefiles",
            cmake_extra_opts: "-Dbuild_search=YES -Dbuild_app=YES -Dbuild_parse=YES",
            cmake_preset: "conan-release",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
        - {
            name: "Ubuntu Latest GCC Debug",
            os: ubuntu-20.04,
            build_type: "Debug", cc: "gcc", cxx: "g++",
            build_gen: "Unix Makefiles",
            cmake_extra_opts: "-Dbuild_search=YES -Dbuild_app=YES -Dbuild_parse=YES",
            cmake_preset: "conan-debug",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
        - {
            name: "Ubuntu Latest Clang Release",
            os: ubuntu-20.04,
            build_type: "Release", cc: "clang", cxx: "clang++",
            build_gen: "Unix Makefiles",
            cmake_extra_opts: "-Duse_libclang=YES -Dstatic_libclang=YES -Duse_libc++=NO",
            cmake_preset: "conan-release",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
        - {
            name: "Ubuntu Latest Clang Debug",
            os: ubuntu-20.04,
            build_type: "Debug", cc: "clang", cxx: "clang++",
            build_gen: "Unix Makefiles",
            cmake_extra_opts: "-Duse_libclang=YES -Dstatic_libclang=YES -Duse_libc++=NO",
            cmake_preset: "conan-debug",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
        - {
            name: "macOS Latest Release (Intel)",
            os: macos-13,
            build_type: "Release", cc: "clang", cxx: "clang++",
            build_gen: "Unix Makefiles",
            cmake_preset: "conan-release",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
        - {
            name: "macOS Latest Debug (Intel)",
            os: macos-13,
            build_type: "Debug", cc: "clang", cxx: "clang++",
            build_gen: "Unix Makefiles",
            cmake_preset: "conan-debug",
            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
          }
#        - {
#            name: "macOS Latest Release (Apple Silicon)",
#            os: macos-14-arm64,
#            build_type: "Release", cc: "clang", cxx: "clang++",
#            build_gen: "Unix Makefiles",
#            cmake_preset: "conan-release",
#            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
#          }
#        - {
#            name: "macOS Latest Debug (Apple Silicon)",
#            os: macos-14-arm64,
#            build_type: "Debug", cc: "clang", cxx: "clang++",
#            build_gen: "Unix Makefiles",
#            cmake_preset: "conan-debug",
#            conan_config_specific_deps: " --requires flex/2.6.4 --requires libxml2/2.12.6"
#          }
        - {
            name: "Windows Latest MSVC Release",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            build_gen: "Ninja",
            cmake_extra_opts: "",
            cmake_preset: "conan-release",
            conan_config_specific_deps: ""
          }
        - {
            name: "Windows Latest MSVC Debug",
            os: windows-latest,
            build_type: "Debug", cc: "cl", cxx: "cl",
            build_gen: "Ninja",
            cmake_extra_opts: "",
            cmake_preset: "conan-debug",
            conan_config_specific_deps: ""
          }
    steps:
    - name: Checkout doxygen
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup VS Environment (Windows)
      uses: seanmiddleditch/gha-setup-vsdevenv@v4
      if: matrix.config.os == 'windows-latest'

    - name: Setup Clang / GCC Environment (Linux)
      run: |
        sudo apt-get update
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/${{ matrix.config.cc }} 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/${{ matrix.config.cxx }} 100
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Conan
      shell: bash
      run: |
        pip install conan==2.2.3
        conan profile detect
        awk -v build_type="${{ matrix.config.build_type }}" 'BEGIN{FS=OFS="="} /^build_type/{$2=build_type}1' $(conan profile path default) > temp && mv temp $(conan profile path default)
        echo -e '[conf]\ntools.cmake.cmaketoolchain:generator=${{matrix.config.build_gen}}\n' >> $(conan profile path default) 
        conan profile show -pr:a default

    - name: Install libiconv, flex, bison, xmllint
      shell: bash
      run: |
        echo "::group::Conan install"
        conan install -pr:h default -pr:b default -g CMakeDeps -g CMakeToolchain --build missing --requires libiconv/1.17${{matrix.config.conan_config_specific_deps}}
        echo "::endgroup::"
        echo "::group::Generated files in ./"
        ls -al .
        echo "::endgroup::"
        #echo "::group::CMakeUserPresets.json"
        #cat CMakeUserPresets.json
        #echo "::endgroup::"
        echo "::group::CMakePresets.json"
        cat CMakePresets.json
        echo "::endgroup::"
        echo "::group::conan_toolchain.cmake"
        cat conan_toolchain.cmake
        echo "::endgroup::"

    - name: Install bison (MacOS)
      run: |
        brew update
        brew install bison;
        echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
        #echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
      if: matrix.config.os == 'macos-13'

    - name: Install bison/flex (Windows)
      run: |
        choco install winflexbison
      if: matrix.config.os == 'windows-latest'

    - name: Install LaTeX (Linux)
      run: |
        sudo apt-get install texlive texlive-latex-recommended texlive-extra-utils texlive-latex-extra texlive-font-utils
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install LaTeX (MacOS)
      run: |
        brew update
        brew install --cask mactex;
        echo "/Library/TeX/texbin/" >> $GITHUB_PATH
      if: matrix.config.os == 'macos-13'

    - name: Install LaTeX (Windows)
      uses: teatimeguest/setup-texlive-action@v3
      with:
        packages: >-
          scheme-medium
          collection-latexextra
          babel-dutch
          cjk
          bibtex
      if: matrix.config.os == 'windows-latest'

    - name: Install libclang (Ubuntu 20.04)
      run: |
        #sudo apt-get remove llvm-10 llvm-10-dev llvm-10-tools llvm-10-runtime clang-10 clang-format-10 libclang-common-10-dev libclang-cpp10 libclang1-10 libllvm10
        sudo apt-get remove llvm-11 llvm-11-dev llvm-11-tools llvm-11-runtime clang-11 clang-format-11 libclang-common-11-dev libclang-cpp11 libclang1-11 libllvm11
        sudo apt-get remove llvm-12 llvm-12-dev llvm-12-tools llvm-12-runtime clang-12 clang-format-12 libclang-common-12-dev libclang-cpp12 libclang1-12 libllvm12
        sudo apt-get autoremove
        sudo apt-get clean
        sudo apt-get install libclang-common-10-dev libclang-10-dev
        apt list --installed | egrep '(clang|llvm)'
        ls -d /usr/lib/llvm-*/include/
        sudo update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-10   100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 100
        ls -al /usr/bin/clang++
        ls -al /etc/alternatives/clang++
        which clang++
        clang++ -v
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install libxapian (Ubuntu 20.04)
      run: |
        sudo apt-get install libxapian-dev
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install Ghostscript (Linux)
      run: |
        sudo apt-get install ghostscript
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install Ghostscript (Windows)
      run:
        choco install ghostscript
      if: matrix.config.os == 'windows-latest'

    - name: Setting Ghostscript paths (Windows)
      shell: bash
      run: |
        export GSpath=`find /c/Prog*/gs -name gswin\*c.exe | sed -e "s/gswin.*c.exe//"`
        export PATH="$GSpath:$PATH"
        export GSpath=`echo "$GSpath" | sed -e "s%/c%C:%"`
        echo "$GSpath" >> $GITHUB_PATH
      if: matrix.config.os == 'windows-latest'

    - name: Install Graphviz (Linux)
      run: |
        sudo apt-get install graphviz
      if: startsWith(matrix.config.os,'ubuntu-')

    - name: Install Graphviz (MacOS)
      run: |
        if ! brew install graphviz; then
          # Workaround issue with unexpected symlinks: https://github.com/actions/runner-images/issues/6817
          for f in 2to3 idle3 pydoc3 python3 python3-config; do
            rm /usr/local/bin/$f || true
          done
          # Try again
          brew install graphviz
        fi
      if: matrix.config.os == 'macos-13'

    - name: Install Graphviz (Windows)
      run:
        choco install graphviz.portable
      if: matrix.config.os == 'windows-latest'

    - name: Refresh Env (Windows)
      run: |
        Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
        refreshenv
      if: matrix.config.os == 'windows-latest'

    - name: Install Qt 6
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.2.*
      if: matrix.config.is == 'macos-13'

    - name: Install Qt 5
      uses: jurplel/install-qt-action@v4
      with:
        version: 5.*
      if: matrix.config.is != 'macos-13'

    - name: Check tool versions (Linux / MacOS)
      shell: bash
      run: |
        chmod +x ./conanrun.sh
        chmod +x ./conanbuild.sh
        ./conanrun.sh
        ./conanbuild.sh
        echo "=== perl ===";
        perl --version;
        echo "=== python ===";
        python --version;
        echo "=== cmake ===";
        cmake --version;
        echo "=== latex ===";
        latex --version;
        echo "=== bibtex ===";
        bibtex --version
        echo "=== dvips ===";
        dvips --version
        echo "=== bison ===";
        bison --version;
        echo "=== flex ===";
        flex --version;
        echo "=== dot ===";
        dot -V;
        echo "=== ghostscript ===";
        gs --version;
        echo "=== Qt ===";
        qmake -v;
      if: matrix.config.os != 'windows-latest'

    - name: Check tool versions (Windows)
      shell: cmd
      run: |
        ./conanrun.bat
        ./conanbuild.bat
        echo "=== perl ===";
        perl --version;
        echo "=== python ===";
        python --version;
        echo "=== cmake ===";
        cmake --version;
        echo "=== latex ===";
        latex --version;
        echo "=== bibtex ===";
        bibtex --version
        echo "=== dvips ===";
        dvips --version
        echo "=== bison ===";
        win_bison --version;
        echo "=== flex ===";
        win_flex --version;
        echo "=== dot ===";
        dot -V;
        echo "=== ghostscript ===";
        gswin64c --version;
        echo "=== Qt ===";
        qmake -v;
      if: matrix.config.os == 'windows-latest'

    - name: Configure
      shell: bash
      run: |
        cmake \
          -S . \
          -B build \
          --preset ${{ matrix.config.cmake_preset }} \
          -Dbuild_doc=YES \
          -Dbuild_wizard=YES \
          ${{ matrix.config.cmake_extra_opts }}
        ls -la .
        ls -la ./build
        cat build/CMakeCache.txt

    - name: Build
      id: build
      shell: bash
      run: |
        cmake --build build --preset ${{ matrix.config.cmake_preset }} | tee build.log
        ::set-output name={output}::$(cat build.log)

    - name: Show CMake build errors on summary page
      if: steps.build.outcome == 'failure'
      shell: cmake -P {0}
      run: |
        string(REGEX MATCH "FAILED:.*$" error_message "${{ steps.build.outputs.output }}")
        string(REPLACE "\n" "%0A" error_message "${error_message}")
        message("::error::${error_message}")
        message(FATAL_ERROR "Build failed")

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "${{ matrix.config.name }} build artifacts"
        path: build/bin/

    - name: Run tests (Linux / MacOS)
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND
            cmake -E env CTEST_OUTPUT_ON_FAILURE=ON TEST_FLAGS="--xml --xmlxsd --xhtml --qhp --docbook --rtf"
            cmake --build build --target tests --preset ${{ matrix.config.cmake_preset }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
      if: matrix.config.os != 'windows-latest'

    - name: Run tests (Windows)
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND
            cmake -E env CTEST_OUTPUT_ON_FAILURE=ON TEST_FLAGS="--xml --xmlxsd --xhtml --qhp --docbook --rtf --pdf"
            cmake --build build --target tests --preset ${{ matrix.config.cmake_preset }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
      if: matrix.config.os == 'windows-latest'

    - name: Generate documentation
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build --target docs --preset ${{ matrix.config.cmake_preset }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Building documentation failed")
        endif()

    - name: Archive html documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "Html documentation artifacts"
        path: build/html/
      if: matrix.config.name == 'Ubuntu Latest GCC Release'


    - name: Archive Latex documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "Latex documentation artifacts"
        path: build/latex/doxygen_manual.pdf
      if: matrix.config.name == 'Ubuntu Latest GCC Release'

    - name: Generate Internal documentation
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build --target docs_internal --preset ${{ matrix.config.cmake_preset }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Building internal documentation failed")
        endif()
      if: matrix.config.name == 'Ubuntu Latest GCC Release'

    - name: Publish Internal documentation to Github pages
      uses: peaceiris/actions-gh-pages@v4
      with:
         deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
         external_repository: doxygen/doxygen-docs
         publish_dir: build/doxygen_docs/html
         force_orphan: true
      if: ${{ github.event_name == 'push' && matrix.config.name == 'Ubuntu Latest GCC Release' }}
